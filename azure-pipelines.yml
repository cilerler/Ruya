# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

# You can also tell Azure Pipelines to skip running a pipeline that a commit would normally trigger. Just include [skip ci] in the commit message or description of the HEAD commit and Azure Pipelines will skip running CI. You can also use any of the variations below.
#[skip ci] or [ci skip]
#skip-checks: true or skip-checks:true
#[skip azurepipelines] or [azurepipelines skip]
#[skip azpipelines] or [azpipelines skip]
#[skip azp] or [azp skip]
#***NO_CI***

# logging https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/logging-commands?view=azure-devops&tabs=powershell
# variables https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch

# $(Build.DefinitionName)_$(Build.DefinitionVersion)_$(Build.BuildId)_$(Build.BuildNumber)_$(My.Variable)
 

trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude:
    - docs/README.md

pool:
  vmImage: 'ubuntu-16.04'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'


steps:
# - script: |
#     git config --global --add filter.lfs.required true
#     git config --global --add filter.lfs.smudge "git-lfs smudge -- %f"
#     git config --global --add filter.lfs.process "git-lfs filter-process"
#     git config --global --add filter.lfs.clean "git-lfs clean -- %f"
#   displayName: Configure LFS for use with submodules
- powershell: Write-Host "This is a script that could use $env:BUILD_NUMBER"
  env:
    BUILD_NUMBER: '1.0.$(BuildId)'
- checkout: self
  submodules: true
  lfs: true
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '3.0.100'
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/Ruya.Primitives.csproj'
    feedsToUse: 'select'
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/Ruya.Primitives.csproj'
    arguments: '--configuration $(BuildConfiguration) /p:BuildNumber=$(Build.BuildNumber)'
- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '**/*Tests/Ruya.Primitives.Tests.csproj'
    arguments: '--configuration $(BuildConfiguration) /p:BuildNumber=$(Build.BuildNumber)'
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: false
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: false
- task: DotNetCoreCLI@2
  inputs:
    command: 'pack'
    packagesToPack: '**/Ruya.Primitives.csproj'
    nobuild: true
    versioningScheme: 'byBuildNumber'
    # versioningScheme: byEnvVar
    # versionEnvVar: version
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

# - task: NuGetCommand@2
#   inputs:
#     command: 'push'
#     packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
#     nuGetFeedType: 'external'